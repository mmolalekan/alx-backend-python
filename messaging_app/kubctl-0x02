#!/bin/bash

# kubctl-0x02 - Blue-Green Deployment Script
# This script performs zero-downtime blue-green deployments

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Function to check current active version
get_active_version() {
    CURRENT_SELECTOR=$(kubectl get service django-app-main-service -o jsonpath='{.spec.selector.version}')
    echo "$CURRENT_SELECTOR"
}

# Function to deploy new version
deploy_version() {
    local version=$1
    local deployment_file=$2
    
    print_info "Deploying $version version..."
    kubectl apply -f $deployment_file
    
    # Wait for deployment to be ready
    print_info "Waiting for $version deployment to be ready..."
    kubectl wait --for=condition=available deployment/django-app-$version --timeout=300s
    
    # Check pod status
    print_info "Checking $version pods status..."
    kubectl get pods -l app=django-app,version=$version
    
    # Check logs for errors
    print_info "Checking logs for $version deployment..."
    local pods=$(kubectl get pods -l app=django-app,version=$version -o jsonpath='{.items[*].metadata.name}')
    
    for pod in $pods; do
        print_info "Logs for pod: $pod"
        kubectl logs $pod --tail=10 | grep -i "error\|exception\|fail" || true
    done
}

# Function to switch traffic
switch_traffic() {
    local target_version=$1
    
    print_info "Switching traffic to $target_version version..."
    
    # Update the main service selector
    kubectl patch service django-app-main-service -p "{\"spec\":{\"selector\":{\"version\":\"$target_version\"}}}"
    
    # Verify the switch
    sleep 5
    CURRENT_ACTIVE=$(get_active_version)
    
    if [ "$CURRENT_ACTIVE" == "$target_version" ]; then
        print_success "Traffic successfully switched to $target_version"
    else
        print_error "Failed to switch traffic to $target_version"
        exit 1
    fi
}

# Function to perform health checks
health_check() {
    local version=$1
    print_info "Performing health checks for $version version..."
    
    # Port forward to check health
    kubectl port-forward service/django-app-${version}-service 8080:8000 > /dev/null 2>&1 &
    local port_forward_pid=$!
    sleep 5
    
    # Health check
    if curl -s http://localhost:8080/api/health/ > /dev/null; then
        print_success "$version version health check passed"
    else
        print_error "$version version health check failed"
        kill $port_forward_pid 2>/dev/null
        return 1
    fi
    
    kill $port_forward_pid 2>/dev/null
    return 0
}

# Main execution
echo "=========================================="
echo "Blue-Green Deployment Script"
echo "=========================================="

# Check current active version
CURRENT_ACTIVE=$(get_active_version)
print_info "Current active version: $CURRENT_ACTIVE"

# Determine which version to deploy
if [ "$CURRENT_ACTIVE" == "blue" ]; then
    NEW_VERSION="green"
    NEW_DEPLOYMENT="green_deployment.yaml"
else
    NEW_VERSION="blue"
    NEW_DEPLOYMENT="blue_deployment.yaml"
fi

print_info "Deploying new version: $NEW_VERSION"

# Step 1: Deploy the new version
deploy_version $NEW_VERSION $NEW_DEPLOYMENT

# Step 2: Health check the new version
if health_check $NEW_VERSION; then
    print_success "New version ($NEW_VERSION) is healthy"
else
    print_error "New version ($NEW_VERSION) health check failed. Aborting deployment."
    exit 1
fi

# Step 3: Switch traffic to new version
switch_traffic $NEW_VERSION

# Step 4: Verify the switch
print_info "Final verification..."
kubectl get services -o wide | grep django-app
kubectl get deployments -o wide | grep django-app

# Step 5: Optional - Scale down old version (comment out if you want to keep for rollback)
print_warning "Scaling down old version: $CURRENT_ACTIVE"
kubectl scale deployment django-app-$CURRENT_ACTIVE --replicas=1

print_success "Blue-green deployment completed successfully!"
print_info "Active version: $NEW_VERSION"
print_info "Old version (scaled down): $CURRENT_ACTIVE"

echo ""
echo "To rollback, run: kubectl patch service django-app-main-service -p '{\"spec\":{\"selector\":{\"version\":\"$CURRENT_ACTIVE\"}}}'"